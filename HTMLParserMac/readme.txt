
Build the HTML parser that does:
	- Search and read the all HTML files under the specified folder
	- Pase the HTML files and export the pair of source and target files
	- Two types of source/target pair are generated:
		A. Header/Body
			The source text is extracted from the header texts (H1, H2, H3 etc).
			The target text is the body of the trailing paragraphs that appear
			following after the header. This text contains line breaks.
			The resulted text in the source is a line of text, and the target
			is a chain of several paragraphs.
		B. Atomic
			The smallest block of text that is extracted from the whole part of HTML,
			delimited by 'ã€‚', section, line break or any type of atomic block of text.
			This will result in single line of text for source, single line of test for target, 
			and the same number of lines will be loaded in to both source and target file.
		C. Atomic Header/Body
			Like the Header/Body parser, the header becomes the source and the body becomes 
			the target. But the body text is broken into the atomic piece of text, like 
			the atomic parser, and the each atomic text is linked to that section's header.
			This will result in the same line of text appears in the source, where the series
			of target text lines share the common source text.

Special Tokens
	The following tokens will appear in the vocabulary file to indicate special
	directions to the seq2seq RNN.

	<unk>
		Unknown token. This is defined as zero in the Tensorflow NMT code.
		So this has to appear at the top of vocab file (indexed by zero).
	<s>
		Start of sentense.
	</s>
		End of sentense.
	<br>
		Line break.
	<sp>
		Space. This is the half-width space.

	<br> and <sp> are required because those two are actually used in 
	the source and target files to describe the data. Line-breaks are used
	to delimit the lines, and spaces are used to separate words.
	But they are also required to be generated by NMT, so you need to
	symbolize them in the source/target data, and later when NMT emits
	the output then they are converted back into the actual character code 
	data and turned into the final output.


After this is done, move on to the 'Data Set' part of tensorflow.
Learn how to read data into dataset, and assign it into the tensor graph.
Read https://www.tensorflow.org/api_guides/python/reading_data#Reading_from_files
The corresponding part of the NMT tutorial code is:
	..\tensorflow\tutorial\NMT\aplac\nmt\model_helper.py(60): def create_train_model(
Focus on the 'TextLineDataset' part.


Required Python Libraries:
	chardet
		pip install chardet
	Beautiful Soup 4
		pip install beautifulsoup4

	If Python2
		html.parser
	If Python3
		HTMLParser